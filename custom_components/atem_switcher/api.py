"""Sample API Client."""

from __future__ import annotations

import asyncio
import logging
import time
from threading import Thread
from typing import Any

import PyATEMMax


class AtemSwitcherApiClientError(Exception):
    """Exception to indicate a general API error."""


class AtemSwitcherApiClientCommunicationError(
    AtemSwitcherApiClientError,
):
    """Exception to indicate a communication error."""


class AtemSwitcherApiClientAuthenticationError(
    AtemSwitcherApiClientError,
):
    """Exception to indicate an authentication error."""


class AtemSwitcherApiClient:
    """Sample API Client."""

    def __init__(
        self,
        hostname: str,
    ) -> None:
        """ATEM client."""
        self._hostname = hostname  # 10.31.211.14
        self._switcher = PyATEMMax.ATEMMax()
        self._connected = False
        self._videoSources = PyATEMMax.ATEMVideoSources()
        Thread(target=self._connect, daemon=True).start()

    def _connect(self) -> None:
        self._switcher.connect(self._hostname)
        self._switcher.waitForConnection(waitForFullHandshake=False)
        time.sleep(1)
        self._connected = True

    async def wait_for_connection(self) -> None:
        """Wait until the connection has been established."""
        LOGGER.debug("Waiting for connection to ATEM to complete")
        while True:
            if self._connected:
                return
            await asyncio.sleep(0.1)

    async def async_get_data(self) -> Any:
        """Get data from the API."""
        return {"inputs": self.get_inputs(), "source": self.get_source()}

    def get_inputs(self) -> list[str]:
        """
        Return list of available input names.

        For the ATEM mini, we use the four HDMI inputs plus the color bars.
        """
        return [
            self._switcher.inputProperties[vs].longName for vs in (1, 2, 3, 4, 0, 1000)
        ]

    def get_source(self) -> str:
        """Return the long name of the currently selected input source."""
        try:
            vs = self._switcher.programInput[0].videoSource
            return self._switcher.inputProperties[vs].longName
        except KeyError:
            return "0: (unknown)"

    def set_source(self, source: str) -> Any:
        """Set the source from the name generated by get_source()."""
        LOGGER.debug("Switching to input %s", source)
        me = self._switcher.atem.mixEffects.mixEffect1
        for _, v in self._videoSources._values.items():  # noqa: PERF102, SLF001
            if self._switcher.inputProperties[v.value].longName == source:
                LOGGER.debug("Switching to input %s", int(v.value))
                self._switcher.setProgramInputVideoSource(me, int(v.value))
                return
        LOGGER.warning("Unable to find input %s", source)
